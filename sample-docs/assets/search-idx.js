export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home DreamHouse Aura Sample Application     IMPORTANT:  The Dreamhouse App cannot be installed from this repo! This is a stripped down version, including only Apex classes, in order to demonstrate    ApexDox VS Code 's documentation capabilities.     The only reason this page is even included, is to demonstrate the apexdox.engine.homePagePath   setting! To install the Dreamhouse app,    header over to https://github.com/dreamhouseapp/dreamhouse-sfdx  and clone the repo, following the    instructions there.     INFO:  Include other non-documentation pages(other than the project home page or class groups) with the    apexdox.engine.pages   setting.    Then you can link to them like this . Dreamhouse is a sample application for the real estate business built on the Salesforce platform. It allows brokers    to manage their properties and customers to find their dream house. Table of contents     Installation instructions                     Installing DreamHouse using Salesforce DX              Installing DreamHouse using an unlocked                    package                    Code highlights      Additional resources   Installation Instructions There are two ways to install DreamHouse:     Using Salesforce DX     Using an unlocked package  Installing DreamHouse using Salesforce DX This is the recommended installation option for developers who want to experience the app and the code.             Install Salesforce DX. Enable the Dev Hub in your org or sign up for a Dev Hub trial org and install the            Salesforce DX CLI. Follow the instructions in the Salesforce                DX Setup Guide  or in the App                Development with Salesforce DX  Trailhead module.                  Clone the dreamhouse-sfdx  repository:         git clone https://github.com/dreamhouseapp/dreamhouse-sfdxcd dreamhouse-sfdx                   Create a scratch org and provide it with an alias of your choice(dh  in the command below):                 sfdx force:org:create -s -f config/project-scratch-def.json -a dh                   Push the app to your scratch org:         sfdx force:source:push                   Assign the dreamhouse  permission set to the default user:         sfdx force:user:permset:assign -n dreamhouse                   Open the scratch org:         sfdx force:org:open                   Select DreamHouse  in the App Launcher                  Click the Data Import  tab and click Initialize Sample Data        Installing DreamHouse using an unlocked package This is the recommended option for non developers. Use this option if you want to experience the sample app but do    not plan to modify the code.             Sign up  for a developer edition.                  Enable My Domain. Follow the instructions to enable My Domain here .                          Click this link to install the DreamHouse unlocked package into your developer edition org.                  Select Install for All Users . When prompted, make sure you grant access to the external            sites(api.lifx.com, dreamhouzz-push-server.herokuapp.com, and hooks.slack.com).                  Select DreamHouse  in the App Launcher.                  Click the Data Import  tab and click Initialize Sample Data .       Code highlights Lightning components DreamHouse features a large number of Lightning Components to enhance the user experience. Lightning Components are    used on the Property record page, on an app pages(Property Finder  and Property        Explorer ), in the utility bar, and as quick actions. Installing a Lightning component as a quick action  can be a great alternative to adding the    component directly to the page layout because the component instantiation is deferred until the action button is    clicked(lazy instantiation). Installing less frequently used components as quick or global actions can contribute    to a faster page loading time, and a streamlined user interface. In DreamHouse, the SmartHome component is installed as a quick action on the    Property record page. The utility bar  is a great place to host components you always want at your fingertips. MortgageCalculator is a great example. Base Lightning components Base Lightning Components are a set of powerful UI components available in the Lightning Component Framework. The    DreamHouse custom components use many Base Lightning Components as building blocks. For example,    lightning:card , lightning:button , and lightning:layout  are used    throughout the application. PropertyCarousel, which allows you    to navigate through the pictures of a property and upload new pictures, is built using    lightning:carousel  and lightning:fileUpload . PropertySummary leverages    lightning:formattedAddress  and lightning:formattedNumber . Lightning Data Service Lightning Data Service allows you to manipulate(retrieve, create, update, delete) Salesforce records without writing    server-side code(Apex). In DreamHouse, all the Lightning components that work with a single Property record use    Lightning Data Service. Check out PropertySummary for an    example. Third-Party JavaScript libraries You can use third-party JavaScript libraries in Lightning Components using ltng:require . For    example:     Map and PropertyListMap use the Leaflet library.     PriceRange uses the nouislider  library for its double slider.  Standard application events Standard application events are available by default in the framework and are used to trigger high level actions. For    example, in PropertySummary,    force:navigateToSObject  is used to navigate to the broker record page, and    force:editRecord  is used to edit a record in place. Custom application events Custom application events are used for communication between components in App Builder. For example, the PropertyFilterChange event is fired in the PropertyFilter component to notify other components that    new filtering criteria have been selected. Component events Component events are used for finer-grained communication between components. For example, the PropertyPaginator component fires the    pageNext  and pagePrevious  events to notify its parent(PropetyTileList) that the user requested the next or    previous page. Custom page templates Custom page templates allow you to create ad hoc page layouts that admins can use in App Builder to create new pages.    Custom page templates are implemented as Lightning Components. There are two custom page templates in Dreamhouse: PageTemplate264   (used by the Property Finder  page) and PageTemplate273   (used by the Property Explorer  page). They provide custom three column layouts using different    relative widths for each column. Reports and dashboards Reports and dashboards are easy to create and look great in Lightning. Just to get things started, the DreamHouse app    includes a few reports in the DreamHouse Reports  folder(Days on Market ,    Properties by Broker , and Portfolio Health ), and a dashboard in the    DreamHouse Dashboard  folder(My Dashboard ). Einstein Vision The VisualSearchBox component leverages Einstein Vision to    provide a visual search feature that allows you to find houses based on the picture of a house you like. Just select    or drag a picture in the Visual search area of the property filters: Einstein Vision will recognize the type of    house(colonial, victorian, or contemporary) and you will be presented with a list of houses matching that category.    Follow the instructions below to enable visual search in the Property Finder  and Property        Explorer  pages:             Get an Einstein Platform Services  account. Follow the instructions here .                          In Salesforce, click the Files  tab and upload einstein_platform.pem .                  In Setup , type Custom  in the Quick Find box and click the Custom                Settings  link.                  Click the first New  Button(at the top of the screen).                  For Einstein Vision Email , specify the email address you used when you created your Einstein            Platform Services account(step 1), and click Save .                  In the DreamHouse app, click the Einstein Vision  tab.                  Click the Create Dataset  button.                  In the houses  tile, click the Train  button, the click the            Models  tab.                  Click the Refresh Models  button until the Progress column indicates 100% .                          Copy the Model Id  in your clipboard.                  Click the Property Finder  Tab, click the gear icon(upper right corner), and click            Edit Page . Click the Filters  component and paste the Model Id in the            Einstein Model Id  field in the right sidebar. Save the page.                  Repeat the last step for the Property Explorer  page.       You can now search houses by uploading(or dropping) a picture in the visual search box that is part of the Filters    component on the Property Finder  and Property Explorer  pages. Additional resources DreamHouse has many more features not discussed here. For example, DreamHouse also demonstrates how to:     Use the Salesforce Mobile App     Create a customer engagement mobile app with the Mobile SDK     Automate processes with Process Builder, including sending push notification messages to the customer engagement        app     Integrate with Alexa, Slack, and Facebook Messenger     Integrate with IoT devices like smart lights, smart thermostats, and smart locks  Head over to dreamhouseapp.io  to learn more."
    },
    {
        "title": "Funny",
        "fileName": "Funny.html",
        "text": "Extra Page This is a non-documentation page that was included in the docs using the apexdox.engine.pages   setting. Now here's a funny meme:"
    },
    {
        "title": "Bot",
        "fileName": "Bot.html",
        "text": "Dreamhouse Bot The classes in this group work together to enable Dreamhouse's Bot Capabilities.     INFO:  This is a class group page. You can provide a class group page for classes grouped    togehter using the @group  tag with the @group-content     tag. See the tags documentation  for more info.     Modern apps support new customer engagement channels. In the DreamHouse sample app,    customers can use Salesforce-powered bots to search for houses, check for price    changes, and schedule appointments."
    },
    {
        "title": "BotController",
        "fileName": "BotController.html",
        "text": "BotController Handler Mapping inner class. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nis.  If you're reading this in code, this is the only class in the \"Dreamhouse Bot\" group which includes a group-content  tag. It only needs to be defined once for the entire group. Signature public with sharing class BotController See License , Github , ThisClass.andMethodDoNotExist Salesforce.comJul 2017 BotController Properties Name Signature Description handlerMappings static List<HandlerMapping> handlerMappings A list of HandlerMapping  instances. BotController Methods submit(utterance, session, fileName, fileContent) The method that handles submitting the data. Lorem ipsum dolor  sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. submit(utterance, session, fileName, fileContent) The method that handles submitting the data. Lorem ipsum dolor  sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Signature @AuraEnabled public static BotResponse submit(String utterance, Map<String, String> session, String fileName, String fileContent) Parameters utterance Type: String Utterance description. session Type: Map<String, String> Session description. fileName Type: String Filename description. fileContent Type: String FileContent description. Returns Returns a BotResponse  instance. See BotHandler.handle BotController.HandlerMapping Handler Mapping inner class. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Signature class HandlerMapping BotController.HandlerMapping Properties Name Signature handlerClassName public String handlerClassName utterancePattern public Pattern utterancePattern BotController.HandlerMapping Constructors HandlerMapping(handlerClassName, patternStr) HandlerMapping(handlerClassName, patternStr) Signature public HandlerMapping(String handlerClassName, String patternStr)"
    },
    {
        "title": "BotField",
        "fileName": "BotField.html",
        "text": "BotField The BotField  class. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad veniam, quis nostrud exercitation ullamco laboris nis. Signature public class BotField See License , Github , BotController , BotRecord Salesforce.comJul 2017 Example for(Dashboard d : dashboards) { List<BotField> fields = new List<BotField>(); fields.add(new BotField('Name', d.Title, '/lightning/r/Dashboard/' + d.Id + '/view')); fields.add(new BotField('Folder', d.FolderName)); records.add(new BotRecord(fields)); } BotField Properties Name Signature Annotations linkURL public String linkURL @AuraEnabled name public String name @AuraEnabled value public String value @AuraEnabled BotField Constructors BotField(name, value) BotField(name, value, linkURL) BotField(name, value) Signature public BotField(String name, String value) BotField(name, value, linkURL) Signature public BotField(String name, String value, string linkURL) Example for(Dashboard d : dashboards) { List<BotField> fields = new List<BotField>(); fields.add(new BotField('Name', d.Title, '/lightning/r/Dashboard/' + d.Id + '/view')); fields.add(new BotField('Folder', d.FolderName)); records.add(new BotRecord(fields)); }"
    },
    {
        "title": "BotHandler",
        "fileName": "BotHandler.html",
        "text": "BotHandler The BotHandler  class. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad veniam, quis nostrud exercitation ullamco laboris nis. Signature public interface BotHandler See License , Github Salesforce.comJul 2017 BotHandler Methods handle(utterance, params, session, fileName, fileContent) The handle method for this interface which handles some stuff. handle(utterance, params, session, fileName, fileContent) The handle method for this interface which handles some stuff. Signature BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent) Parameters utterance Type: String Utterance description goes here. params The params for the utterance. session Type: Map<String, String> Session description goes here. Occasionally descriptions are really really long and they need to go onto a second or third line. This is totally cool, no biggie. fileName Type: String Filename description. fileContent Type: String FileContent description. Returns Looks like it returns a BotResponse  instance. See BotController.submit"
    },
    {
        "title": "BotItem",
        "fileName": "BotItem.html",
        "text": "BotItem The BotItem  class. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad veniam, quis nostrud exercitation ullamco laboris nis. Signature public class BotItem See License , Github Salesforce.comJul 2017 BotItem Properties Name Signature Annotations linkURL public String linkURL @AuraEnabled name public String name @AuraEnabled BotItem Constructors BotItem(name) Convenience constructor to create a single item BotItem(name, linkURL) Convenience constructor to create a single item BotItem(name) Convenience constructor to create a single item Signature public BotItem(String name) Parameters name Type: String The BotItem s name BotItem(name, linkURL) Convenience constructor to create a single item Signature public BotItem(String name, string linkURL) Parameters name Type: String The BotItem s name linkURL Type: string The BotItem s link"
    },
    {
        "title": "BotMessage",
        "fileName": "BotMessage.html",
        "text": "BotMessage The BotMessage  class. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad veniam, quis nostrud exercitation ullamco laboris nis. Signature public virtual class BotMessage See License , Github Salesforce.comJul 2017 BotMessage Properties Name Signature Annotations author public String author @AuraEnabled buttons public List<BotMessageButton> buttons @AuraEnabled imageURL public String imageURL @AuraEnabled items public List<BotItem> items @AuraEnabled messageText public String messageText @AuraEnabled records public List<BotRecord> records @AuraEnabled BotMessage Constructors BotMessage() Default constructor BotMessage(author, messageText) Convenience constructor to create a simple bot message. BotMessage(author, messageText, records) Convenience constructor to create a simple bot message. BotMessage(author, messageText, items) Convenience constructor to create a simple bot message. BotMessage(author, messageText, buttons) Convenience constructor to create a simple bot message. BotMessage(author, messageText, imageURL) Convenience constructor to create a simple bot message. BotMessage() Default constructor Signature public BotMessage() BotMessage(author, messageText) Convenience constructor to create a simple bot message. Signature public BotMessage(String author, String messageText) Parameters author Type: String Author param description messageText Type: String Message text param description. If you're reading this in code, the 'see' tag below, serves no other purpose than to demonstrate using overload selectors, e.g. SomeClass.SomeOverloadedMethod[3]  to link a specific method overload in your documentation. The below example links to the 3rd overload of the BotResponse  constructor. See BotResponse.BotResponse BotMessage(author, messageText, records) Convenience constructor to create a simple bot message. Signature public BotMessage(String author, String messageText, List<BotRecord> records) Parameters author Type: String Author param description messageText Type: String Message text param description records Type: List<BotRecord> A list of BotRecord s See BotRecord BotMessage(author, messageText, items) Convenience constructor to create a simple bot message. Signature public BotMessage(String author, String messageText, List<BotItem> items) Parameters author Type: String Author param description messageText Type: String Message text param description items Type: List<BotItem> A list of BotItem s See BotItem BotMessage(author, messageText, buttons) Convenience constructor to create a simple bot message. Signature public BotMessage(String author, String messageText, List<BotMessageButton> buttons) Parameters author Type: String Author param description messageText Type: String Message text param description items A list of BotMessageButton s See BotMessageButton BotMessage(author, messageText, imageURL) Convenience constructor to create a simple bot message. Signature public BotMessage(String author, String messageText, String imageURL) Parameters author Type: String Author param description messageText Type: String Message text param description imageURL Type: String ImageURL param description"
    },
    {
        "title": "BotMessageButton",
        "fileName": "BotMessageButton.html",
        "text": "BotMessageButton The BotMessageButton  class. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad veniam, quis nostrud exercitation ullamco laboris nis. Signature public class BotMessageButton See License , Github Salesforce.comJul 2017 BotMessageButton Properties Name Signature Annotations label public String label @AuraEnabled value public String value @AuraEnabled BotMessageButton Constructors BotMessageButton(label, value) Convenience constructor to create a simple bot message button. BotMessageButton(label, value) Convenience constructor to create a simple bot message button. Signature public BotMessageButton(String label, String value) Parameters label Type: String Label param description value Type: String value param description"
    },
    {
        "title": "BotRecord",
        "fileName": "BotRecord.html",
        "text": "BotRecord The BotMessageButton  class. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad veniam, quis nostrud exercitation ullamco laboris nis. Signature public class BotRecord See License , Github , BotField Salesforce.comJul 2017 BotRecord Properties Name Signature Annotations Description fields public List<BotField> fields @AuraEnabled Public, AuraEnabled list of BotField  records. BotRecord s data. BotRecord Constructors BotRecord(fields) Basic constructor for BotRecord  class. BotRecord(fields) Basic constructor for BotRecord  class. Signature public BotRecord(List<BotField> fields) Parameters fields Type: List<BotField> Fields param description."
    },
    {
        "title": "BotResponse",
        "fileName": "BotResponse.html",
        "text": "BotResponse The BotMessageButton  class. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad veniam, quis nostrud exercitation ullamco laboris nis. Signature public class BotResponse See License , Github , BotMessage Salesforce.comJul 2017 Example // ... if(session == null) { BotMessage message = new BotMessage('Bot', 'What City?'); session = new Map<String, String>(); session.put('nextCommand', 'HandlerFindProperties'); session.put('step', 'city'); return new BotResponse(message, session); } // ... BotResponse Properties Name Signature Annotations messages public List<BotMessage> messages @AuraEnabled session public Map<String, String> session @AuraEnabled BotResponse Constructors BotResponse() BotResponse(messages) Constructor to create a response with multiple messages. BotResponse(messages, session) Constructor to create a response with multiple messages. BotResponse(message) Convenience constructor to create a response with a single message BotResponse(message, session) Convenience constructor to create a response with a single message BotResponse() Signature public BotResponse() BotResponse(messages) Constructor to create a response with multiple messages. Signature public BotResponse(BotMessage[] messages) Parameters messages A list of BotMessage s to create the response with. messages BotResponse(messages, session) Constructor to create a response with multiple messages. Signature public BotResponse(List<BotMessage> messages, Map<String, String> session) Parameters messages Type: List<BotMessage> A list of BotMessage s to create the response with. session Type: Map<String, String> The session to use. BotResponse(message) Convenience constructor to create a response with a single message Signature public BotResponse(BotMessage message) Parameters message Type: BotMessage A BotMessage  instance to create the response with. BotResponse(message, session) Convenience constructor to create a response with a single message Signature public BotResponse(BotMessage message, Map<String, String> session) Parameters message Type: BotMessage A BotMessage  instance to create the response with. session Type: Map<String, String> The session to use."
    },
    {
        "title": "EinsteinVisionController",
        "fileName": "EinsteinVisionController.html",
        "text": "EinsteinVisionController The EinsteinVisionController  class. Does some cool stuff with Einstein Vision. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad veniam, quis nostrud exercitation ullamco laboris nis. Signature global with sharing class EinsteinVisionController See License , Github Salesforce.comJul 2017 EinsteinVisionController Properties Name Signature Description settings private static final Dreamhouse_Settings__c settings Default settings for the Dreamhouse org VISION_API public static String VISION_API Vision API endpoint. EinsteinVisionController Methods createDataset(pathToZip) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. deleteDataset(datasetId) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. getAccessToken() You can upload the 'einstein_platform.pem' into your Salesforce org as 'File' sObject and read it as below getDatasets() Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. getModelsByDataset(datasetId) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. predict(fileName, content, modelId) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur? predictDemo(fileName, content) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse predictInternal(sample, access_token, model, isBase64) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. predictReal(fileName, content, modelId) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur? trainModel(modelName, datasetId) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. createDataset(pathToZip) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Signature @AuraEnabled public static String createDataset(String pathToZip) Parameters pathToZip Type: String Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse Returns Returns an empty string or an error message. deleteDataset(datasetId) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Signature @AuraEnabled public static String deleteDataset(Integer datasetId) Parameters datasetId Type: Integer Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse Returns Returns an empty string or an error message. getAccessToken() You can upload the 'einstein_platform.pem' into your Salesforce org as 'File' sObject and read it as below Signature private static String getAccessToken() getDatasets() Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Signature @AuraEnabled public static String getDatasets() Returns Returns an empty string or an error message. getModelsByDataset(datasetId) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Signature @AuraEnabled public static String getModelsByDataset(Integer datasetId) Parameters datasetId Type: Integer Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse Returns Returns an empty string or an error message. predict(fileName, content, modelId) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur? Signature @AuraEnabled public static List<Prediction> predict(String fileName, String content, String modelId) Parameters fileName Type: String Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse content Type: String Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse modelId Type: String Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse Returns Returns List<Prediction> , which is super awesome. predictDemo(fileName, content) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse Signature @AuraEnabled public static List<Prediction> predictDemo(String fileName, String content) Parameters fileName Type: String Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse content Type: String Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse Returns List<Prediction>  return description. predictInternal(sample, access_token, model, isBase64) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Signature private static List<Prediction> predictInternal(String sample, String access_token, String model, boolean isBase64) Parameters sample Type: String Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. access_token Type: String Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. model Type: String Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. isBase64 Type: boolean Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Returns A list of Prediction  records. predictReal(fileName, content, modelId) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur? Signature @AuraEnabled public static List<Prediction> predictReal(String fileName, String content, String modelId) Parameters fileName Type: String Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse content Type: String Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse modelId Type: String Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse Returns Returns List<Prediction> , which is super awesome. Exceptions Throws AuraHandledException  if access token cannot be retrieved. trainModel(modelName, datasetId) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Signature @AuraEnabled public static String trainModel(String modelName, Integer datasetId) Parameters modelName Type: String Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. datasetId Type: Integer Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Returns Returns an empty string or an error message. EinsteinVisionController.Prediction Prediction  inner class. Signature public class Prediction EinsteinVisionController.Prediction Properties Name Signature Annotations label public String label @AuraEnabled probability public Double probability @AuraEnabled EinsteinVisionController.Prediction Methods getLabelAndProbability() getLabelAndProbability() Signature public String getLabelAndProbability()"
    },
    {
        "title": "HandlerAddTwoNumbers",
        "fileName": "HandlerAddTwoNumbers.html",
        "text": "HandlerAddTwoNumbers Handle adding two numbers BotHandler  implementation. Signature public with sharing class HandlerAddTwoNumbers implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerAddTwoNumbers Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerCostCenter",
        "fileName": "HandlerCostCenter.html",
        "text": "HandlerCostCenter Handle cost center BotHandler  implementation. Signature public with sharing class HandlerCostCenter implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerCostCenter Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerDashboard",
        "fileName": "HandlerDashboard.html",
        "text": "HandlerDashboard Handle dashboard BotHandler  implementation. Signature public with sharing class HandlerDashboard implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerDashboard Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerEmployeeId",
        "fileName": "HandlerEmployeeId.html",
        "text": "HandlerEmployeeId Handle emp. id BotHandler  implementation. Signature public with sharing class HandlerEmployeeId implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerEmployeeId Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerFileUpload",
        "fileName": "HandlerFileUpload.html",
        "text": "HandlerFileUpload Handle file upload BotHandler  implementation. Signature public with sharing class HandlerFileUpload implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerFileUpload Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerFindAccount",
        "fileName": "HandlerFindAccount.html",
        "text": "HandlerFindAccount Handle find account BotHandler  implementation. Signature public with sharing class HandlerFindAccount implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerFindAccount Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerFindContact",
        "fileName": "HandlerFindContact.html",
        "text": "HandlerFindContact Handle find contact BotHandler  implementation. Signature public with sharing class HandlerFindContact implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerFindContact Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerFindProperties",
        "fileName": "HandlerFindProperties.html",
        "text": "HandlerFindProperties Handle find properties BotHandler  implementation. Signature public class HandlerFindProperties implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerFindProperties Methods formatCurrency(i) Helper function to format currency for the message. handle(utterance, params, session, fileName, fileContent) formatCurrency(i) Helper function to format currency for the message. Signature private String formatCurrency(Decimal i) Parameters i Type: Decimal Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Returns The formatted currency. handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerFindPropertiesByBedrooms",
        "fileName": "HandlerFindPropertiesByBedrooms.html",
        "text": "HandlerFindPropertiesByBedrooms Handle find properties by bedrooms BotHandler  implementation. Signature public with sharing class HandlerFindPropertiesByBedrooms implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerFindPropertiesByBedrooms Methods formatCurrency(i) Helper function to format currency for the message. handle(utterance, params, session, fileName, fileContent) formatCurrency(i) Helper function to format currency for the message. Signature private String formatCurrency(Decimal i) Parameters i Type: Decimal Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Returns The formatted currency. handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerHello",
        "fileName": "HandlerHello.html",
        "text": "HandlerHello Handle hello world example BotHandler  implementation. Signature public with sharing class HandlerHello implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerHello Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerHelp",
        "fileName": "HandlerHelp.html",
        "text": "HandlerHelp Handle help BotHandler  implementation. Signature public with sharing class HandlerHelp implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerHelp Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerHelpTopic",
        "fileName": "HandlerHelpTopic.html",
        "text": "HandlerHelpTopic Handle help topic BotHandler  implementation. Signature public with sharing class HandlerHelpTopic implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerHelpTopic Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerImageBasedSearch",
        "fileName": "HandlerImageBasedSearch.html",
        "text": "HandlerImageBasedSearch Handle image based search BotHandler  implementation. Signature public with sharing class HandlerImageBasedSearch implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerImageBasedSearch Properties Name Signature modelId private String modelId HandlerImageBasedSearch Methods formatCurrency(i) Helper function to format currency for the message. handle(utterance, params, session, fileName, fileContent) Just demonstrating linking to a child class method with the 'see' tag. The getLabelAndProbability  method is a contrived example which did not exist in the original source code. Despite the method being incorrectly cased in the code, the see link generator should still make a correct match and display the method name in the UI with the correct casing(from source code) formatCurrency(i) Helper function to format currency for the message. Signature private String formatCurrency(Decimal i) Parameters i Type: Decimal Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Returns The formatted currency. handle(utterance, params, session, fileName, fileContent) Just demonstrating linking to a child class method with the 'see' tag. The getLabelAndProbability  method is a contrived example which did not exist in the original source code. Despite the method being incorrectly cased in the code, the see link generator should still make a correct match and display the method name in the UI with the correct casing(from source code) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent) See BotHandler.handle , EinsteinVisionController.Prediction.getLabelAndProbability"
    },
    {
        "title": "HandlerMyOpenCases",
        "fileName": "HandlerMyOpenCases.html",
        "text": "HandlerMyOpenCases Handle open my cases BotHandler  implementation. Signature public with sharing class HandlerMyOpenCases implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerMyOpenCases Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerNext",
        "fileName": "HandlerNext.html",
        "text": "HandlerNext Handle next BotHandler  implementation. Signature public with sharing class HandlerNext implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerNext Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerPipeline",
        "fileName": "HandlerPipeline.html",
        "text": "HandlerPipeline Handle pipeline BotHandler  implementation. Signature public with sharing class HandlerPipeline implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerPipeline Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerQuarter",
        "fileName": "HandlerQuarter.html",
        "text": "HandlerQuarter Handle quarter BotHandler  implementation. Signature public with sharing class HandlerQuarter implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerQuarter Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerReport",
        "fileName": "HandlerReport.html",
        "text": "HandlerReport Handle report BotHandler  implementation. Signature public with sharing class HandlerReport implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerReport Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerSOQL",
        "fileName": "HandlerSOQL.html",
        "text": "HandlerSOQL Handle SOQL BotHandler  implementation. Signature public with sharing class HandlerSOQL implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerSOQL Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerTopOpportunities",
        "fileName": "HandlerTopOpportunities.html",
        "text": "HandlerTopOpportunities Handle top opps BotHandler  implementation. Signature public with sharing class HandlerTopOpportunities implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerTopOpportunities Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HandlerTravelApproval",
        "fileName": "HandlerTravelApproval.html",
        "text": "HandlerTravelApproval Handle travel approval BotHandler  implementation. Signature public class HandlerTravelApproval implements BotHandler See BotHandler , License , Github Salesforce.comJul 2017 HandlerTravelApproval Methods handle(utterance, params, session, fileName, fileContent) handle(utterance, params, session, fileName, fileContent) Signature public BotResponse handle(String utterance, String[] params, Map<String, String> session, String fileName, String fileContent)"
    },
    {
        "title": "HttpFormBuilder",
        "fileName": "HttpFormBuilder.html",
        "text": "HttpFormBuilder An Http form builder utility class. Signature public class HttpFormBuilder See License , Github Salesforce.comJul 2017 HttpFormBuilder Properties Name Signature Description Boundary private final static string Boundary The boundary is alligned so it doesn't produce padding characters when base64 encoded. Enums Name Signature Values Description EndingType public enum EndingType Cr, CrLf, None Helper enum indicating how a file's base64 padding was replaced. HttpFormBuilder Methods GetContentType() Returns the request's content type for multipart/form-data requests. SafelyPad(value, valueCrLf64, lineBreaks) Pad the value with spaces until the base64 encoding is no longer padded. WriteBodyParameter(key, value) Write a key-value pair to the form's body. WriteBoundary() Write a boundary between parameters to the form's body. WriteBoundary(ending) Write a boundary at the end of the form's body. GetContentType() Returns the request's content type for multipart/form-data requests. Signature public static string GetContentType() SafelyPad(value, valueCrLf64, lineBreaks) Pad the value with spaces until the base64 encoding is no longer padded. Signature private static string SafelyPad(        string value,        string valueCrLf64,        string lineBreaks) Parameters value Type:         string Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. valueCrLf64 Type:        string Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. lineBreaks Type:        string Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Returns The padded base64 string WriteBodyParameter(key, value) Write a key-value pair to the form's body. Signature public static string WriteBodyParameter(        string key,        string value) Parameters key Type:         string Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. value Type:        string Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Returns Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. WriteBoundary() Write a boundary between parameters to the form's body. Signature public static string WriteBoundary() WriteBoundary(ending) Write a boundary at the end of the form's body. Signature public static string WriteBoundary(        EndingType ending) Parameters ending Type:         EndingType Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Returns Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse."
    },
    {
        "title": "JWT",
        "fileName": "JWT.html",
        "text": "JWT An JSON Web Token utility class. Signature public class JWT See License , Github Salesforce.comJul 2017 JWT Properties Name Signature alg public String alg aud public String aud cert public String cert claims public Map<String,String> claims exp public String exp HS256 public static final String HS256 iat public String iat iss public String iss NONE public static final String NONE pkcs8 public String pkcs8 privateKey public String privateKey RS256 public static final String RS256 sub public String sub validFor public Integer validFor JWT Constructors JWT(alg) JWT(alg) Signature public JWT(String alg) JWT Methods base64URLencode(input) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. issue() Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. base64URLencode(input) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Signature public String base64URLencode(Blob input) Parameters input Type: Blob Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Returns Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. issue() Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Signature public String issue() Returns JSON string"
    },
    {
        "title": "JWTBearerFlow",
        "fileName": "JWTBearerFlow.html",
        "text": "JWTBearerFlow An JSON Web Token utility class. Signature public class JWTBearerFlow See License , Github Salesforce.comJul 2017 JWTBearerFlow Methods getAccessToken(tokenEndpoint, jwt) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. getAccessToken(tokenEndpoint, jwt) Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse. Signature public static String getAccessToken(String tokenEndpoint, JWT jwt) Parameters tokenEndpoint Type: String The Token's endpoint jwt Type: JWT An instance of the JWT  class Returns Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse."
    },
    {
        "title": "LIFXController",
        "fileName": "LIFXController.html",
        "text": "LIFXController The LIFXController  class. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad veniam, quis nostrud exercitation ullamco laboris nis. Signature public with sharing class LIFXController LIFXController Properties Name Signature settings private static final Dreamhouse_Settings__c settings LIFXController Methods getLights() setBrightness(lightId, brightness) setPower(lightId, isOn) setState(lightId, state) getLights() Signature @AuraEnabled public static String getLights() setBrightness(lightId, brightness) Signature @AuraEnabled public static String setBrightness(String lightId, Decimal brightness) setPower(lightId, isOn) Signature @AuraEnabled public static String setPower(String lightId, Boolean isOn) setState(lightId, state) Signature public static String setState(String lightId, String state)"
    },
    {
        "title": "PostPriceChangeToSlack",
        "fileName": "PostPriceChangeToSlack.html",
        "text": "PostPriceChangeToSlack The PostPriceChangeToSlack  class. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad veniam, quis nostrud exercitation ullamco laboris nis. Signature public class PostPriceChangeToSlack See License , Github Salesforce.comJul 2017 Enums Name Signature Values Description Days public enum Days MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY An inner enum added to demonstrate how ApexDox VS Code handles inner enums. They will be presented in a table and can only have description's, like properties. Months public enum Months JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER An inner enum added to demonstrate how ApexDox VS Code handles inner enums. They can only have description's, like properties. ApexDox Should be able to handle to wonky way this enum is written in code. Numbers public enum Numbers ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN An inner enum added to demonstrate how ApexDox VS Code handles inner enums. They will be presented in a table and can only have description's, like properties. PostPriceChangeToSlack Methods postToSlack(propertyId) Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad veniam, quis nostrud exercitation ullamco laboris nis. postToSlack(propertyId) Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad veniam, quis nostrud exercitation ullamco laboris nis. Signature @InvocableMethod(label='Post Price Change Notification to Slack') public static void postToSlack(List<Id> propertyId) Parameters propertyId Type: List<Id> A list of property IDs to post to Slack. PostPriceChangeToSlack.QueueableSlackCall A good example of how ApexDox VS Code handles inner classes. Inner classes / interfaces support the same tags as their top-level counterparts(i.e. top level type in a .cls file), but tags like 'author' and 'since' are better left to the top-level class. Just for example's sake, including an example tag here as well. Signature public class QueueableSlackCall implements System.Queueable, Database.AllowsCallouts Example Dreamhouse_Settings__c settings = Dreamhouse_Settings__c.getOrgDefaults(); String slackUrl = settings.Slack_Property_Webhook_URL__c; String body = 'This is a message, equeued up to be posted on Slack!'; System.enqueueJob(new QueueableSlackCall(slackURL, 'POST', body)); PostPriceChangeToSlack.QueueableSlackCall Properties Name Signature body private final String body method private final String method url private final String url PostPriceChangeToSlack.QueueableSlackCall Constructors QueueableSlackCall(url, method, body) QueueableSlackCall(url, method, body) Signature public QueueableSlackCall(String url, String method, String body) Parameters url Type: String The Slack Url to post the message to. method Type: String The HTTP method to use body Type: String The body of the message. PostPriceChangeToSlack.QueueableSlackCall Methods execute(ctx) The execute method implements the System.Queueable  interface. And handle's the queueable's execution. execute(ctx) The execute method implements the System.Queueable  interface. And handle's the queueable's execution. Signature public void execute(System.QueueableContext ctx) Parameters ctx Type: System.QueueableContext The System.QueueableContext  for the execute method."
    },
    {
        "title": "PropertyController",
        "fileName": "PropertyController.html",
        "text": "PropertyController The PropertyController  class. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad veniam, quis nostrud exercitation ullamco laboris nis. Signature global with sharing class PropertyController See License , Github Salesforce.comJul 2017 PropertyController Methods findById(propertyId) Incididunt ut labore et dolore magna aliqua. getAtRiskProperties() Incididunt ut labore et dolore magna aliqua getAvailableProperties() Incididunt ut labore et dolore magna aliqua getComparableProperties(propertyId) Incididunt ut labore et dolore magna aliqua getPictures(propertyId) Incididunt ut labore et dolore magna aliqua. Incididunt ut labore et dolore magna aliqua. getPropertyList(searchKey, minPrice, maxPrice, numberBedrooms, numberBathrooms, visualSearchKey) If you're reading this in code, this is what it looks like when you have the ApexDox.docBlock.alignItems  setting set to true  and are not ommiting the description tag via ApexDox.docBlock.omitDescriptionTag . getPropertyListPage(searchKey, minPrice, maxPrice, numberBedrooms, numberBathrooms, visualSearchKey, pageSize, pageNumber) If you're reading this in code, this is what it looks like when you have the ApexDox.docBlock.alignItems  setting set to true  and are ommiting the descrition tag via ApexDox.docBlock.omitDescriptionTag . getSimilarProperties(propertyId, bedrooms, price, searchCriteria) Incididunt ut labore et dolore magna aliqua. Incididunt ut labore et dolore magna aliqua. findById(propertyId) Incididunt ut labore et dolore magna aliqua. Signature @AuraEnabled(cacheable=true) public static Property__c findById(Id propertyId) Parameters propertyId Type: Id Incididunt ut labore et dolore magna aliqua Returns Incididunt ut labore et dolore magna aliqua getAtRiskProperties() Incididunt ut labore et dolore magna aliqua Signature @AuraEnabled public static Property__c[] getAtRiskProperties() Returns Incididunt ut labore et dolore magna aliqua getAvailableProperties() Incididunt ut labore et dolore magna aliqua Signature @AuraEnabled public static Property__c[] getAvailableProperties() Returns Incididunt ut labore et dolore magna aliqua getComparableProperties(propertyId) Incididunt ut labore et dolore magna aliqua Signature @AuraEnabled(cacheable=true) public static List<Property__c> getComparableProperties(Id propertyId) Parameters propertyId Type: Id Incididunt ut labore et dolore magna aliqua Returns List<Property__c> getPictures(propertyId) Incididunt ut labore et dolore magna aliqua. Incididunt ut labore et dolore magna aliqua. Signature @AuraEnabled public static List<ContentVersion> getPictures(Id propertyId) Parameters propertyId Type: Id Incididunt ut labore et dolore magna aliqua Returns List<ContentVersion> getPropertyList(searchKey, minPrice, maxPrice, numberBedrooms, numberBathrooms, visualSearchKey) If you're reading this in code, this is what it looks like when you have the ApexDox.docBlock.alignItems  setting set to true  and are not ommiting the description tag via ApexDox.docBlock.omitDescriptionTag . Signature @AuraEnabled(cacheable=true) public static Property__c[] getPropertyList(String searchKey, Decimal minPrice, Decimal maxPrice, Integer numberBedrooms, Integer numberBathrooms, String visualSearchKey) Parameters searchKey Type: String Incididunt ut labore et dolore magna aliqua minPrice Type: Decimal Incididunt ut labore et dolore magna aliqua maxPrice Type: Decimal Incididunt ut labore et dolore magna aliqua numberBedrooms Type: Integer Incididunt ut labore et dolore magna aliqua numberBathrooms Type: Integer Incididunt ut labore et dolore magna aliqua visualSearchKey Type: String Incididunt ut labore et dolore magna aliqua Returns Returns a Property__c[]  list See ApexDox Settings getPropertyListPage(searchKey, minPrice, maxPrice, numberBedrooms, numberBathrooms, visualSearchKey, pageSize, pageNumber) If you're reading this in code, this is what it looks like when you have the ApexDox.docBlock.alignItems  setting set to true  and are ommiting the descrition tag via ApexDox.docBlock.omitDescriptionTag . Signature @AuraEnabled(cacheable=true) public static PropertyListPage getPropertyListPage(String searchKey, Decimal minPrice, Decimal maxPrice, Integer numberBedrooms, Integer numberBathrooms, String visualSearchKey, Decimal pageSize, Decimal pageNumber) Parameters searchKey Type: String Incididunt ut labore et dolore magna aliqua minPrice Type: Decimal Incididunt ut labore et dolore magna aliqua maxPrice Type: Decimal Incididunt ut labore et dolore magna aliqua numberBedrooms Type: Integer Incididunt ut labore et dolore magna aliqua numberBathrooms Type: Integer Incididunt ut labore et dolore magna aliqua visualSearchKey Type: String Incididunt ut labore et dolore magna aliqua pageSize Type: Decimal Incididunt ut labore et dolore magna aliqua pageNumber Type: Decimal Incididunt ut labore et dolore magna aliqua Returns Returns a PropertyListPage . See ApexDox Settings getSimilarProperties(propertyId, bedrooms, price, searchCriteria) Incididunt ut labore et dolore magna aliqua. Incididunt ut labore et dolore magna aliqua. Signature @AuraEnabled(cacheable=true) public static List<Property__c> getSimilarProperties(Id propertyId, Decimal bedrooms, Decimal price, String searchCriteria) Parameters propertyId Type: Id Incididunt ut labore et dolore magna aliqua bedrooms Type: Decimal Incididunt ut labore et dolore magna aliqua price Type: Decimal Incididunt ut labore et dolore magna aliqua searchCriteria Type: String Incididunt ut labore et dolore magna aliqua Returns List<Property__c>"
    },
    {
        "title": "PropertyListPage",
        "fileName": "PropertyListPage.html",
        "text": "PropertyListPage The PropertyListPage  class. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad veniam, quis nostrud exercitation ullamco laboris nis. Signature public class PropertyListPage See License , Github Salesforce.comJul 2017 PropertyListPage Properties Name Signature Annotations Description pageNumber public Integer pageNumber @AuraEnabled pageSize public Integer pageSize @AuraEnabled The description column will show up any time there's a description on a property. properties public List<Property__c> properties @AuraEnabled total public Integer total @AuraEnabled"
    },
    {
        "title": "PushPriceChangeNotification",
        "fileName": "PushPriceChangeNotification.html",
        "text": "PushPriceChangeNotification The PushPriceChangeNotification  class. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad veniam, quis nostrud exercitation ullamco laboris nis. Signature public with sharing class PushPriceChangeNotification See License , Github Salesforce.comJul 2017 Enums Name Signature Values Description SomeEnumAddedForExamplePurposes public enum SomeEnumAddedForExamplePurposes JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER An inner enum added to demonstrate how ApexDox VS Code handles inner enums. They can only have description's, like properties. ApexDox Should be able to handle to wonky way this enum is written in code. PushPriceChangeNotification Methods pushNotification(propertyId) Incididunt ut labore et dolore magna aliqua, quis autem vel eum iure reprehenderit qui incididunt. pushNotification(propertyId) Incididunt ut labore et dolore magna aliqua, quis autem vel eum iure reprehenderit qui incididunt. Signature @InvocableMethod(label='Push Price Change Notification') public static void pushNotification(List<Id> propertyId) Parameters propertyId Type: List<Id> Incididunt ut labore et dolore magna aliqua PushPriceChangeNotification.QueueablePushCall A good example of how ApexDox VS Code handles inner classes. Inner classes / interfaces support the same tags as their top-level counterparts(i.e. top level type in a .cls file), but tags like 'author' and 'since' are better left to the top-level class. Just for example's sake, including an example tag here as well. Signature public class QueueablePushCall implements System.Queueable, Database.AllowsCallouts Example Dreamhouse_Settings__c settings = Dreamhouse_Settings__c.getOrgDefaults(); String pushServerURL = settings.Push_Server_URL__c; String body = 'This is a message, equeued up to be posted on Slack!'; System.enqueueJob(new QueueablePushCall(pushServerURL, 'POST', body)); PushPriceChangeNotification.QueueablePushCall Properties Name Signature body private final String body method private final String method url private final String url PushPriceChangeNotification.QueueablePushCall Constructors QueueablePushCall(url, method, body) QueueablePushCall(url, method, body) Signature public QueueablePushCall(String url, String method, String body) Parameters url Type: String The Server Url to post the message to. method Type: String The HTTP method to use body Type: String The body of the message. PushPriceChangeNotification.QueueablePushCall Methods execute(ctx) The execute method implements the System.Queueable  interface. And handle's the queueable's execution. execute(ctx) The execute method implements the System.Queueable  interface. And handle's the queueable's execution. Signature public void execute(System.QueueableContext ctx) Parameters ctx Type: System.QueueableContext The System.QueueableContext  for the execute method."
    },
    {
        "title": "SampleDataController",
        "fileName": "SampleDataController.html",
        "text": "SampleDataController The SampleDataController  class. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad veniam, quis nostrud exercitation ullamco laboris nis. Signature public with sharing class SampleDataController See License , Github Salesforce.comJul 2017 SampleDataController Methods importSampleData() Utility method for importing sample data. importSampleData() Utility method for importing sample data. Signature @AuraEnabled public static void importSampleData()"
    },
    {
        "title": "SlackOpportunityPublisher",
        "fileName": "SlackOpportunityPublisher.html",
        "text": "SlackOpportunityPublisher The SlackOpportunityPublisher  class. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad veniam, quis nostrud exercitation ullamco laboris nis. Signature public with sharing class SlackOpportunityPublisher See License , Github Salesforce.comJul 2017 SlackOpportunityPublisher Properties Name Signature Description slackURL private static final String slackURL The slack URL to use for publishing. Enums Name Signature Values Description SomeEnumAddedForExamplePurposes public enum SomeEnumAddedForExamplePurposes JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER An inner enum added to demonstrate how ApexDox VS Code handles inner enums. They can only have description's, like properties. ApexDox Should be able to handle to wonky way this enum is written in code. SlackOpportunityPublisher Methods postToSlack(opportunityId) Incididunt ut labore et dolore magna aliqua, quis autem vel eum iure reprehenderit qui incididunt. postToSlack(opportunityId) Incididunt ut labore et dolore magna aliqua, quis autem vel eum iure reprehenderit qui incididunt. Signature @InvocableMethod(label='Post to Slack') public static void postToSlack(List<Id> opportunityId) Parameters opportunityId Type: List<Id> The Id of the opportunity to post. SlackOpportunityPublisher.QueueableSlackCall A good example of how ApexDox VS Code handles inner classes. Inner classes / interfaces support the same tags as their top-level counterparts(i.e. top level type in a .cls file), but tags like 'author' and 'since' are better left to the top-level class. Just for example's sake, including an example tag here as well. Signature public class QueueableSlackCall implements System.Queueable, Database.AllowsCallouts Example String body = 'This is a message, equeued up to be posted on Slack!'; System.enqueueJob(new QueueablePushCall('https://someurl.com', 'POST', body)); SlackOpportunityPublisher.QueueableSlackCall Properties Name Signature body private final String body method private final String method url private final String url SlackOpportunityPublisher.QueueableSlackCall Constructors QueueableSlackCall(url, method, body) QueueableSlackCall(url, method, body) Signature public QueueableSlackCall(String url, String method, String body) Parameters url Type: String The Server Url to post the message to. method Type: String The HTTP method to use body Type: String The body of the message. SlackOpportunityPublisher.QueueableSlackCall Methods execute(ctx) The execute method implements the System.Queueable  interface. And handle's the queueable's execution. execute(ctx) The execute method implements the System.Queueable  interface. And handle's the queueable's execution. Signature public void execute(System.QueueableContext ctx) Parameters ctx Type: System.QueueableContext The System.QueueableContext  for the execute method."
    },
    {
        "title": "ApexDox",
        "fileName": "ApexDox.html",
        "text": "ApexDox A do nothing class that let's me stick a link to the github repo  in here! Signature public with sharing class ApexDox See https://github.com/no-stack-dub-sack/apexdox-vs-code Peter WeinbergSpring 2019 ApexDox Methods isCool() Is ApexDox VS Code cool? isCool() Is ApexDox VS Code cool? Signature public static boolean isCool() Returns Absolutely!"
    },
    {
        "title": "ArrayUtils",
        "fileName": "ArrayUtils.html",
        "text": "ArrayUtils The apex-lang ArrayUtils  utility class for Apex. The classes in this group have been randomly gathered from various resources simply to demonstrate ApexDox VS Code's multi-source directory feature aimed at Salesforce-DX projects which may have a main  folder and multipke feature directories.  This code is part of the 'apex-lang' open source project avaiable at: http://code.google.com/p/apex-lang/ . This code is licensed under the Apache License, Version 2.0. You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0 . Signature global class ArrayUtils Richard VanhookDec 28, 2008 ArrayUtils Properties Name Signature EMPTY_STRING_ARRAY global static String[] EMPTY_STRING_ARRAY MAX_NUMBER_OF_ELEMENTS_IN_LIST global static Integer MAX_NUMBER_OF_ELEMENTS_IN_LIST ArrayUtils Methods assertArraysAreEqual(expected, actual) Assert that two arrays do not have equal elements assertArraysAreEqual(expected, actual) Assert that two arrays do not have equal elements isEmpty(objectArray) Returns true  if a given array is empty isEmpty(objectArray) Returns true  if a given array is empty isNotEmpty(objectArray) Returns true  if a given array is NOT empty isNotEmpty(objectArray) Returns true  if a given array is NOT empty lowerCase(strs) Lowercase each item of a string array. merg(list1, list2) Merge two lists merg(list1, list2) Merge two lists mergex(array1, array2) Merge the elements of two arrays into a single array. mergex(array1, array2) An overload for mergex  which handles SObjects. objectToString(objects) Cast a list of objects as strings and return the list. pluck(objectArray, fieldName) Iterate over an SObject array, plucking out a given field, and returning each plucked element in an array. qsort(theList) Quicksort implementation for a list of primitive Objects. qsort(theList, sortAsc) Quicksort implementation for a list of primitive Objects. qsort(theList, comparator) Quicksort implementation for a list of Objects. qsort(theList, comparator, sortAsc) Quicksort implementation for a list of Objects. qsort(theList, comparator) Quicksort implementation for a list of SObjects. qsort(theList, comparator, sortAsc) Quicksort implementation for a list of SObjects. qsort(theList, lo0, hi0, comparator, sortAsc) Private helper method qsort(theList, lo0, hi0, comparator, sortAsc) Private helper method reverse(anArray) Reverse an array. reverse(anArray) Reverse an array of SObjects. subset(aList, count) Return a subset of an array. subset(list1, startIndex, count) Return a subset of an array. subset(aList, count) Return a subset of an array. subset(list1, startIndex, count) Return a subset of an array. toString(objectArray) Stringify an array. toString(objectArray) Stringify an array. trim(strs) Cool! upperCase(strs) Uppercase each item of a string array. assertArraysAreEqual(expected, actual) Assert that two arrays do not have equal elements Signature global static void assertArraysAreEqual(Object[] expected, Object[] actual) assertArraysAreEqual(expected, actual) Assert that two arrays do not have equal elements Signature global static void assertArraysAreEqual(SObject[] expected, SObject[] actual) isEmpty(objectArray) Returns true  if a given array is empty Signature global static Boolean isEmpty(Object[] objectArray) isEmpty(objectArray) Returns true  if a given array is empty Signature global static Boolean isEmpty(SObject[] objectArray) isNotEmpty(objectArray) Returns true  if a given array is NOT empty Signature global static Boolean isNotEmpty(Object[] objectArray) isNotEmpty(objectArray) Returns true  if a given array is NOT empty Signature global static Boolean isNotEmpty(SObject[] objectArray) lowerCase(strs) Lowercase each item of a string array. Signature global static List<String> lowerCase(List<String> strs) Parameters strs Type: List<String> A list of strings to convert to lowercase Returns The list of lowercased strings. merg(list1, list2) Merge two lists Signature global static List<Object> merg(List<Object> list1, List<Object> list2) merg(list1, list2) Merge two lists Signature global static List<SObject> merg(List<SObject> list1, List<SObject> list2) mergex(array1, array2) Merge the elements of two arrays into a single array. Signature global static Object[] mergex(Object[] array1, Object[] array2) Parameters array1 The elements of this array will be first in the resulting array. array2 The elements of this array will come after the elements of array1  in the resulting array. Returns The merged array. mergex(array1, array2) An overload for mergex  which handles SObjects. Signature global static SObject[] mergex(SObject[] array1, SObject[] array2) See ArrayUtils.mergex objectToString(objects) Cast a list of objects as strings and return the list. Signature global static List<String> objectToString(List<Object> objects) Parameters objects Type: List<Object> A list of objects to cast Returns Returns a List<String>  of casted objects pluck(objectArray, fieldName) Iterate over an SObject array, plucking out a given field, and returning each plucked element in an array. Signature global static Object[] pluck(SObject[] objectArray, String fieldName) Parameters objectArray An array of SObjects fieldName Type: String The field name to pluck. Returns An object  array continaing the plucked elements. qsort(theList) Quicksort implementation for a list of primitive Objects. Signature global static List<Object> qsort(List<Object> theList) qsort(theList, sortAsc) Quicksort implementation for a list of primitive Objects. Signature global static List<Object> qsort(List<Object> theList, Boolean sortAsc) qsort(theList, comparator) Quicksort implementation for a list of Objects. Signature global static List<Object> qsort(List<Object> theList, IObjectComparatr comparator) qsort(theList, comparator, sortAsc) Quicksort implementation for a list of Objects. Signature global static List<Object> qsort(List<Object> theList, IObjectComparatr comparator, Boolean sortAsc) qsort(theList, comparator) Quicksort implementation for a list of SObjects. Signature global static List<SObject> qsort(List<SObject> theList, ISObjectComparator comparator) qsort(theList, comparator, sortAsc) Quicksort implementation for a list of SObjects. Signature global static List<SObject> qsort(List<SObject> theList, ISObjectComparator comparator,Boolean sortAsc ) qsort(theList, lo0, hi0, comparator, sortAsc) Private helper method Signature private static List<Object> qsort(List<Object> theList,                                Integer lo0,                                 Integer hi0,                                 IObjectComparatr comparator,                                Boolean sortAsc) qsort(theList, lo0, hi0, comparator, sortAsc) Private helper method Signature private static List<SObject> qsort(List<SObject> theList,                                Integer lo0,                                 Integer hi0,                                 ISObjectComparator comparator,                                Boolean sortAsc) reverse(anArray) Reverse an array. Signature global static Object[] reverse(Object[] anArray) Parameters anArray The array to reverse Returns The reversed array. reverse(anArray) Reverse an array of SObjects. Signature global static SObject[] reverse(SObject[] anArray) Parameters anArray The array to reverse Returns The reversed array. subset(aList, count) Return a subset of an array. Signature global static List<Object> subset(List<Object> aList, Integer count) See ArrayUtils.subset , ArrayUtils.subset , ArrayUtils.subset subset(list1, startIndex, count) Return a subset of an array. Signature global static List<Object> subset(List<Object> list1, Integer startIndex, Integer count) subset(aList, count) Return a subset of an array. Signature global static List<SObject> subset(List<SObject> aList, Integer count) subset(list1, startIndex, count) Return a subset of an array. Signature global static List<SObject> subset(List<SObject> list1, Integer startIndex, Integer count) toString(objectArray) Stringify an array. Signature global static String toString(Object[] objectArray) Parameters objectArray The array to stringigy. Returns String toString(objectArray) Stringify an array. Signature global static String toString(SObject[] objectArray) Parameters objectArray The array to stringigy. Returns String trim(strs) Cool! Signature global static List<String> trim(List<String> strs) Parameters strs Type: List<String> Cool Returns List<String> upperCase(strs) Uppercase each item of a string array. Signature global static List<String> upperCase(List<String> strs) Parameters strs Type: List<String> A list of strings to convert to uppercase Returns The list of uppercased strings."
    },
    {
        "title": "IllegalStateException",
        "fileName": "IllegalStateException.html",
        "text": "IllegalStateException The apex-lang IllegalStateException  class. The classes in this group have been randomly gathered from various resources simply to demonstrate ApexDox VS Code's multi-source directory feature aimed at Salesforce-DX projects which may have a main  folder and multipke feature directories.  This code is part of the 'apex-lang' open source project avaiable at: http://code.google.com/p/apex-lang/ . This code is licensed under the Apache License, Version 2.0. You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0 . Signature global class IllegalStateException extends Exception Richard VanhookDec 28, 2008"
    },
    {
        "title": "IObjectComparator",
        "fileName": "IObjectComparator.html",
        "text": "IObjectComparator The apex-lang ISObjectComparator  interface. The classes in this group have been randomly gathered from various resources simply to demonstrate ApexDox VS Code's multi-source directory feature aimed at Salesforce-DX projects which may have a main  folder and multipke feature directories.  This code is part of the 'apex-lang' open source project avaiable at: http://code.google.com/p/apex-lang/ . This code is licensed under the Apache License, Version 2.0. You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0 . Signature global interface IObjectComparator See ArrayUtils.qsort Richard VanhookDec 28, 2008 IObjectComparator Methods compare(object1, object2) compare(object1, object2) Signature Integer compare(Object object1, Object object2)"
    },
    {
        "title": "ISObjectComparator",
        "fileName": "ISObjectComparator.html",
        "text": "ISObjectComparator The apex-lang ISObjectComparator  interface. The classes in this group have been randomly gathered from various resources simply to demonstrate ApexDox VS Code's multi-source directory feature aimed at Salesforce-DX projects which may have a main  folder and multipke feature directories. See ArrayUtils.qsort .  This code is part of the 'apex-lang' open source project avaiable at: http://code.google.com/p/apex-lang/ . This code is licensed under the Apache License, Version 2.0. You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0 . Signature global interface ISObjectComparator See ArrayUtils.qsort Richard VanhookDec 28, 2008 ISObjectComparator Methods compare(record1, record2) compare(record1, record2) Signature Integer compare(SObject record1, SObject record2)"
    },
    {
        "title": "MyRestResource",
        "fileName": "MyRestResource.html",
        "text": "MyRestResource The MyRestResource  class. The classes in this group have been randomly gathered from various resources simply to demonstrate ApexDox VS Code's multi-source directory feature aimed at Salesforce-DX projects which may have a main  folder and multipke feature directories. Signature @RestResource(urlMapping='/Account/*') global with sharing class MyRestResource See License , Github Salesforce.comJul 2017 MyRestResource Methods doDelete() doGet() doPost(name, phone, website) doDelete() Signature @HttpDelete global static void doDelete() doGet() Signature @HttpGet global static Account doGet() doPost(name, phone, website) Signature global static String doPost(String name,        String phone, String website)"
    },
    {
        "title": "MyWebService",
        "fileName": "MyWebService.html",
        "text": "MyWebService Basic webservice class included here to for demo purposes. Try filtering by webService using the scoping / 'show' panel.  This class should be hidden / shown in the menu when you toggle the webService scope. Signature global class MyWebService Salesforce.com2019 MyWebService Methods makeContact(contactLastName, a) makeContact(contactLastName, a) Signature webservice static Id makeContact(String contactLastName, Account a)"
    },
    {
        "title": "PrimitiveComparator",
        "fileName": "PrimitiveComparator.html",
        "text": "PrimitiveComparator The apex-lang PrimitiveComparator  class. The classes in this group have been randomly gathered from various resources simply to demonstrate ApexDox VS Code's multi-source directory feature aimed at Salesforce-DX projects which may have a main  folder and multipke feature directories. See its use in ArrayUtils.qsort .  This code is part of the 'apex-lang' open source project avaiable at: http://code.google.com/p/apex-lang/ . This code is licensed under the Apache License, Version 2.0. You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0 . Signature global class PrimitiveComparator implements ObjectComparator See ArrayUtils.qsort Richard VanhookDec 28, 2008 PrimitiveComparator Methods compare(object1, object2) compare(b1, b2) compare(d1, d2) compare(d1, d2) compare(d1, d2) compare(i1, i2) compare(l1, l2) compare(s1, s2) compare(t1, t2) compare(object1, object2) Signature global Integer compare(Object object1, Object object2) compare(b1, b2) Signature global Integer compare(Boolean b1, Boolean b2) compare(d1, d2) Signature global Integer compare(Date d1, Date d2) compare(d1, d2) Signature global Integer compare(Datetime d1, Datetime d2) compare(d1, d2) Signature global Integer compare(Double d1, Double d2) compare(i1, i2) Signature global Integer compare(Integer i1, Integer i2) compare(l1, l2) Signature global Integer compare(Long l1, Long l2) compare(s1, s2) Signature global Integer compare(String s1, String s2) compare(t1, t2) Signature global Integer compare(Time t1, Time t2)"
    },
    {
        "title": "Status",
        "fileName": "Status.html",
        "text": "Status Global status enum for updating the status of jobs and tasks throughout the job's lifecycle. Signature public enum Status Values QUEUED PROCESSING COMPLETE COMPLETE_WITH_ERRORS FAILED P. Weinberg2019"
    },
    {
        "title": "StopWatch",
        "fileName": "StopWatch.html",
        "text": "StopWatch The apex-lang StopWatch  utility class for Apex. The classes in this group have been randomly gathered from various resources simply to demonstrate ApexDox VS Code's multi-source directory feature aimed at Salesforce-DX projects which may have a main  folder and multipke feature directories.  This code is part of the 'apex-lang' open source project avaiable at: http://code.google.com/p/apex-lang/ . This code is licensed under the Apache License, Version 2.0. You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0 . Signature global class StopWatch Richard VanhookDec 28, 2008 StopWatch Properties Name Signature runningState private Integer runningState splitState private Integer splitState startTime private Long startTime STATE_RUNNING private static final Integer STATE_RUNNING STATE_SPLIT private static final Integer STATE_SPLIT STATE_STOPPED private static final Integer STATE_STOPPED STATE_SUSPENDED private static final Integer STATE_SUSPENDED STATE_UNSPLIT private static final Integer STATE_UNSPLIT STATE_UNSTARTED private static final Integer STATE_UNSTARTED stopTime private Long stopTime StopWatch Methods getSplitTime() Call this method to get split time. getStartTime() Call this method to get the start time. getTime() Call this method to get the current time. reset() Call this method to reset the stopwatch. resume() Call this method to resume the stopwatch. split() Call this method to split the stopwatch. start() Call this method to start the stopwatch. stop() Call this method to stop the stopwatch. suspend() Call this method to suspend the stopwatch. toSplitString() Call this method to get the split time as a string. toStr() Call this method to get the time as a string. unsplit() Call this method to unsplit the stopwatch. getSplitTime() Call this method to get split time. Signature global Long getSplitTime() Exceptions Throws IllegalStateException getStartTime() Call this method to get the start time. Signature global Long getStartTime() Exceptions Throws IllegalStateException getTime() Call this method to get the current time. Signature global Long getTime() reset() Call this method to reset the stopwatch. Signature global void reset() resume() Call this method to resume the stopwatch. Signature global void resume() Exceptions Throws IllegalStateException split() Call this method to split the stopwatch. Signature global void split() Exceptions Throws IllegalStateException start() Call this method to start the stopwatch. Signature global void start() Exceptions Throws IllegalStateException stop() Call this method to stop the stopwatch. Signature global void stop() Exceptions Throws IllegalStateException suspend() Call this method to suspend the stopwatch. Signature global void suspend() Exceptions Throws IllegalStateException toSplitString() Call this method to get the split time as a string. Signature global String toSplitString() toStr() Call this method to get the time as a string. Signature global String toStr() unsplit() Call this method to unsplit the stopwatch. Signature global void unsplit() Exceptions Throws IllegalStateException"
    }
];
